//
// File generated by rootcint at Mon Sep  3 17:49:24 2012

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "FitCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TStreamerInfo.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TCollectionProxy.h"
#include "TIsAProxy.h"
// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TMultiDimFet_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TMultiDimFet(void *p = 0);
   static void *newArray_TMultiDimFet(Long_t size, void *p);
   static void delete_TMultiDimFet(void *p);
   static void deleteArray_TMultiDimFet(void *p);
   static void destruct_TMultiDimFet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TMultiDimFet*)
   {
      ::TMultiDimFet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TMultiDimFet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TMultiDimFet", ::TMultiDimFet::Class_Version(), "/mnt/storage/pcoharp103/totrpsim/kuba/interface/TMultiDimFet.h", 27,
                  typeid(::TMultiDimFet), DefineBehavior(ptr, ptr),
                  &::TMultiDimFet::Dictionary, isa_proxy, 4,
                  sizeof(::TMultiDimFet) );
      instance.SetNew(&new_TMultiDimFet);
      instance.SetNewArray(&newArray_TMultiDimFet);
      instance.SetDelete(&delete_TMultiDimFet);
      instance.SetDeleteArray(&deleteArray_TMultiDimFet);
      instance.SetDestructor(&destruct_TMultiDimFet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TMultiDimFet*)
   {
      return GenerateInitInstanceLocal((::TMultiDimFet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TMultiDimFet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void LHCApertureApproximator_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_LHCApertureApproximator(void *p = 0);
   static void *newArray_LHCApertureApproximator(Long_t size, void *p);
   static void delete_LHCApertureApproximator(void *p);
   static void deleteArray_LHCApertureApproximator(void *p);
   static void destruct_LHCApertureApproximator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::LHCApertureApproximator*)
   {
      ::LHCApertureApproximator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::LHCApertureApproximator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("LHCApertureApproximator", ::LHCApertureApproximator::Class_Version(), "/mnt/storage/pcoharp103/totrpsim/kuba/interface/LHCOpticsApproximator.h", 119,
                  typeid(::LHCApertureApproximator), DefineBehavior(ptr, ptr),
                  &::LHCApertureApproximator::Dictionary, isa_proxy, 4,
                  sizeof(::LHCApertureApproximator) );
      instance.SetNew(&new_LHCApertureApproximator);
      instance.SetNewArray(&newArray_LHCApertureApproximator);
      instance.SetDelete(&delete_LHCApertureApproximator);
      instance.SetDeleteArray(&deleteArray_LHCApertureApproximator);
      instance.SetDestructor(&destruct_LHCApertureApproximator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::LHCApertureApproximator*)
   {
      return GenerateInitInstanceLocal((::LHCApertureApproximator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LHCApertureApproximator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void LHCOpticsApproximator_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_LHCOpticsApproximator(void *p = 0);
   static void *newArray_LHCOpticsApproximator(Long_t size, void *p);
   static void delete_LHCOpticsApproximator(void *p);
   static void deleteArray_LHCOpticsApproximator(void *p);
   static void destruct_LHCOpticsApproximator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::LHCOpticsApproximator*)
   {
      ::LHCOpticsApproximator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::LHCOpticsApproximator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("LHCOpticsApproximator", ::LHCOpticsApproximator::Class_Version(), "/mnt/storage/pcoharp103/totrpsim/kuba/interface/LHCOpticsApproximator.h", 40,
                  typeid(::LHCOpticsApproximator), DefineBehavior(ptr, ptr),
                  &::LHCOpticsApproximator::Dictionary, isa_proxy, 4,
                  sizeof(::LHCOpticsApproximator) );
      instance.SetNew(&new_LHCOpticsApproximator);
      instance.SetNewArray(&newArray_LHCOpticsApproximator);
      instance.SetDelete(&delete_LHCOpticsApproximator);
      instance.SetDeleteArray(&deleteArray_LHCOpticsApproximator);
      instance.SetDestructor(&destruct_LHCOpticsApproximator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::LHCOpticsApproximator*)
   {
      return GenerateInitInstanceLocal((::LHCOpticsApproximator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LHCOpticsApproximator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TNtupleDcorr_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TNtupleDcorr(void *p = 0);
   static void *newArray_TNtupleDcorr(Long_t size, void *p);
   static void delete_TNtupleDcorr(void *p);
   static void deleteArray_TNtupleDcorr(void *p);
   static void destruct_TNtupleDcorr(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TNtupleDcorr*)
   {
      ::TNtupleDcorr *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TNtupleDcorr >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TNtupleDcorr", ::TNtupleDcorr::Class_Version(), "/mnt/storage/pcoharp103/totrpsim/kuba/interface/TNtupleDcorr.h", 30,
                  typeid(::TNtupleDcorr), DefineBehavior(ptr, ptr),
                  &::TNtupleDcorr::Dictionary, isa_proxy, 4,
                  sizeof(::TNtupleDcorr) );
      instance.SetNew(&new_TNtupleDcorr);
      instance.SetNewArray(&newArray_TNtupleDcorr);
      instance.SetDelete(&delete_TNtupleDcorr);
      instance.SetDeleteArray(&deleteArray_TNtupleDcorr);
      instance.SetDestructor(&destruct_TNtupleDcorr);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TNtupleDcorr*)
   {
      return GenerateInitInstanceLocal((::TNtupleDcorr*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TNtupleDcorr*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TMultiDimFet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMultiDimFet::Class_Name()
{
   return "TMultiDimFet";
}

//______________________________________________________________________________
const char *TMultiDimFet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMultiDimFet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMultiDimFet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TMultiDimFet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMultiDimFet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMultiDimFet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMultiDimFet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TMultiDimFet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *LHCApertureApproximator::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *LHCApertureApproximator::Class_Name()
{
   return "LHCApertureApproximator";
}

//______________________________________________________________________________
const char *LHCApertureApproximator::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LHCApertureApproximator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LHCApertureApproximator::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LHCApertureApproximator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LHCApertureApproximator::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LHCApertureApproximator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LHCApertureApproximator::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LHCApertureApproximator*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *LHCOpticsApproximator::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *LHCOpticsApproximator::Class_Name()
{
   return "LHCOpticsApproximator";
}

//______________________________________________________________________________
const char *LHCOpticsApproximator::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LHCOpticsApproximator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LHCOpticsApproximator::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LHCOpticsApproximator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LHCOpticsApproximator::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LHCOpticsApproximator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LHCOpticsApproximator::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LHCOpticsApproximator*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TNtupleDcorr::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TNtupleDcorr::Class_Name()
{
   return "TNtupleDcorr";
}

//______________________________________________________________________________
const char *TNtupleDcorr::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TNtupleDcorr*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TNtupleDcorr::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TNtupleDcorr*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TNtupleDcorr::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TNtupleDcorr*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TNtupleDcorr::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TNtupleDcorr*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TMultiDimFet::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMultiDimFet.

   if (R__b.IsReading()) {
      TMultiDimFet::Class()->ReadBuffer(R__b, this);
   } else {
      TMultiDimFet::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TMultiDimFet::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMultiDimFet.
      TClass *R__cl = ::TMultiDimFet::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fQuantity", &fQuantity);
      fQuantity.ShowMembers(R__insp, strcat(R__parent,"fQuantity.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fSqError", &fSqError);
      fSqError.ShowMembers(R__insp, strcat(R__parent,"fSqError.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fMeanQuantity", &fMeanQuantity);
      R__insp.Inspect(R__cl, R__parent, "fMaxQuantity", &fMaxQuantity);
      R__insp.Inspect(R__cl, R__parent, "fMinQuantity", &fMinQuantity);
      R__insp.Inspect(R__cl, R__parent, "fSumSqQuantity", &fSumSqQuantity);
      R__insp.Inspect(R__cl, R__parent, "fSumSqAvgQuantity", &fSumSqAvgQuantity);
      R__insp.Inspect(R__cl, R__parent, "fVariables", &fVariables);
      fVariables.ShowMembers(R__insp, strcat(R__parent,"fVariables.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fNVariables", &fNVariables);
      R__insp.Inspect(R__cl, R__parent, "fMeanVariables", &fMeanVariables);
      fMeanVariables.ShowMembers(R__insp, strcat(R__parent,"fMeanVariables.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fMaxVariables", &fMaxVariables);
      fMaxVariables.ShowMembers(R__insp, strcat(R__parent,"fMaxVariables.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fMinVariables", &fMinVariables);
      fMinVariables.ShowMembers(R__insp, strcat(R__parent,"fMinVariables.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fSampleSize", &fSampleSize);
      R__insp.Inspect(R__cl, R__parent, "fTestQuantity", &fTestQuantity);
      fTestQuantity.ShowMembers(R__insp, strcat(R__parent,"fTestQuantity.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fTestSqError", &fTestSqError);
      fTestSqError.ShowMembers(R__insp, strcat(R__parent,"fTestSqError.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fTestVariables", &fTestVariables);
      fTestVariables.ShowMembers(R__insp, strcat(R__parent,"fTestVariables.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fTestSampleSize", &fTestSampleSize);
      R__insp.Inspect(R__cl, R__parent, "fMinAngle", &fMinAngle);
      R__insp.Inspect(R__cl, R__parent, "fMaxAngle", &fMaxAngle);
      R__insp.Inspect(R__cl, R__parent, "fMaxTerms", &fMaxTerms);
      R__insp.Inspect(R__cl, R__parent, "fMinRelativeError", &fMinRelativeError);
      R__insp.Inspect(R__cl, R__parent, "fMaxPowers", (void*)&fMaxPowers);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&fMaxPowers, R__insp, strcat(R__parent,"fMaxPowers."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fPowerLimit", &fPowerLimit);
      R__insp.Inspect(R__cl, R__parent, "fFunctions", &fFunctions);
      fFunctions.ShowMembers(R__insp, strcat(R__parent,"fFunctions.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fMaxFunctions", &fMaxFunctions);
      R__insp.Inspect(R__cl, R__parent, "fFunctionCodes", (void*)&fFunctionCodes);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&fFunctionCodes, R__insp, strcat(R__parent,"fFunctionCodes."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fMaxStudy", &fMaxStudy);
      R__insp.Inspect(R__cl, R__parent, "fOrthFunctions", &fOrthFunctions);
      fOrthFunctions.ShowMembers(R__insp, strcat(R__parent,"fOrthFunctions.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fOrthFunctionNorms", &fOrthFunctionNorms);
      fOrthFunctionNorms.ShowMembers(R__insp, strcat(R__parent,"fOrthFunctionNorms.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fMaxPowersFinal", (void*)&fMaxPowersFinal);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&fMaxPowersFinal, R__insp, strcat(R__parent,"fMaxPowersFinal."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fMaxFunctionsTimesNVariables", &fMaxFunctionsTimesNVariables);
      R__insp.Inspect(R__cl, R__parent, "fPowers", (void*)&fPowers);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&fPowers, R__insp, strcat(R__parent,"fPowers."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fPowerIndex", (void*)&fPowerIndex);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&fPowerIndex, R__insp, strcat(R__parent,"fPowerIndex."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fResiduals", &fResiduals);
      fResiduals.ShowMembers(R__insp, strcat(R__parent,"fResiduals.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fMaxResidual", &fMaxResidual);
      R__insp.Inspect(R__cl, R__parent, "fMinResidual", &fMinResidual);
      R__insp.Inspect(R__cl, R__parent, "fMaxResidualRow", &fMaxResidualRow);
      R__insp.Inspect(R__cl, R__parent, "fMinResidualRow", &fMinResidualRow);
      R__insp.Inspect(R__cl, R__parent, "fSumSqResidual", &fSumSqResidual);
      R__insp.Inspect(R__cl, R__parent, "fNCoefficients", &fNCoefficients);
      R__insp.Inspect(R__cl, R__parent, "fOrthCoefficients", &fOrthCoefficients);
      fOrthCoefficients.ShowMembers(R__insp, strcat(R__parent,"fOrthCoefficients.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fOrthCurvatureMatrix", &fOrthCurvatureMatrix);
      fOrthCurvatureMatrix.ShowMembers(R__insp, strcat(R__parent,"fOrthCurvatureMatrix.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCoefficients", &fCoefficients);
      fCoefficients.ShowMembers(R__insp, strcat(R__parent,"fCoefficients.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCoefficientsRMS", &fCoefficientsRMS);
      fCoefficientsRMS.ShowMembers(R__insp, strcat(R__parent,"fCoefficientsRMS.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fRMS", &fRMS);
      R__insp.Inspect(R__cl, R__parent, "fChi2", &fChi2);
      R__insp.Inspect(R__cl, R__parent, "fParameterisationCode", &fParameterisationCode);
      R__insp.Inspect(R__cl, R__parent, "fError", &fError);
      R__insp.Inspect(R__cl, R__parent, "fTestError", &fTestError);
      R__insp.Inspect(R__cl, R__parent, "fPrecision", &fPrecision);
      R__insp.Inspect(R__cl, R__parent, "fTestPrecision", &fTestPrecision);
      R__insp.Inspect(R__cl, R__parent, "fCorrelationCoeff", &fCorrelationCoeff);
      R__insp.Inspect(R__cl, R__parent, "fCorrelationMatrix", &fCorrelationMatrix);
      fCorrelationMatrix.ShowMembers(R__insp, strcat(R__parent,"fCorrelationMatrix.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fTestCorrelationCoeff", &fTestCorrelationCoeff);
      R__insp.Inspect(R__cl, R__parent, "*fHistograms", &fHistograms);
      R__insp.Inspect(R__cl, R__parent, "fHistogramMask", &fHistogramMask);
      R__insp.Inspect(R__cl, R__parent, "*fFitter", &fFitter);
      R__insp.Inspect(R__cl, R__parent, "fPolyType", &fPolyType);
      R__insp.Inspect(R__cl, R__parent, "fShowCorrelation", &fShowCorrelation);
      R__insp.Inspect(R__cl, R__parent, "fIsUserFunction", &fIsUserFunction);
      R__insp.Inspect(R__cl, R__parent, "fIsVerbose", &fIsVerbose);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TMultiDimFet(void *p) {
      return  p ? new(p) ::TMultiDimFet : new ::TMultiDimFet;
   }
   static void *newArray_TMultiDimFet(Long_t nElements, void *p) {
      return p ? new(p) ::TMultiDimFet[nElements] : new ::TMultiDimFet[nElements];
   }
   // Wrapper around operator delete
   static void delete_TMultiDimFet(void *p) {
      delete ((::TMultiDimFet*)p);
   }
   static void deleteArray_TMultiDimFet(void *p) {
      delete [] ((::TMultiDimFet*)p);
   }
   static void destruct_TMultiDimFet(void *p) {
      typedef ::TMultiDimFet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMultiDimFet

//______________________________________________________________________________
void TNtupleDcorr::Streamer(TBuffer &R__b)
{
   // Stream an object of class TNtupleDcorr.

   if (R__b.IsReading()) {
      TNtupleDcorr::Class()->ReadBuffer(R__b, this);
   } else {
      TNtupleDcorr::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TNtupleDcorr::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TNtupleDcorr.
      TClass *R__cl = ::TNtupleDcorr::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fNvar", &fNvar);
      R__insp.Inspect(R__cl, R__parent, "*fArgs", &fArgs);
      TTree::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TNtupleDcorr(void *p) {
      return  p ? new(p) ::TNtupleDcorr : new ::TNtupleDcorr;
   }
   static void *newArray_TNtupleDcorr(Long_t nElements, void *p) {
      return p ? new(p) ::TNtupleDcorr[nElements] : new ::TNtupleDcorr[nElements];
   }
   // Wrapper around operator delete
   static void delete_TNtupleDcorr(void *p) {
      delete ((::TNtupleDcorr*)p);
   }
   static void deleteArray_TNtupleDcorr(void *p) {
      delete [] ((::TNtupleDcorr*)p);
   }
   static void destruct_TNtupleDcorr(void *p) {
      typedef ::TNtupleDcorr current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TNtupleDcorr

//______________________________________________________________________________
void LHCOpticsApproximator::Streamer(TBuffer &R__b)
{
   // Stream an object of class LHCOpticsApproximator.

   if (R__b.IsReading()) {
      LHCOpticsApproximator::Class()->ReadBuffer(R__b, this);
   } else {
      LHCOpticsApproximator::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void LHCOpticsApproximator::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class LHCOpticsApproximator.
      TClass *R__cl = ::LHCOpticsApproximator::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "s_begin_", &s_begin_);
      R__insp.Inspect(R__cl, R__parent, "s_end_", &s_end_);
      R__insp.Inspect(R__cl, R__parent, "beam", &beam);
      R__insp.Inspect(R__cl, R__parent, "nominal_beam_energy_", &nominal_beam_energy_);
      R__insp.Inspect(R__cl, R__parent, "nominal_beam_momentum_", &nominal_beam_momentum_);
      R__insp.Inspect(R__cl, R__parent, "trained_", &trained_);
      R__insp.Inspect(R__cl, R__parent, "out_polynomials", (void*)&out_polynomials);
      ::ROOT::GenericShowMembers("vector<TMultiDimFet*>", (void*)&out_polynomials, R__insp, strcat(R__parent,"out_polynomials."),true);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "coord_names", (void*)&coord_names);
      ::ROOT::GenericShowMembers("vector<std::string>", (void*)&coord_names, R__insp, strcat(R__parent,"coord_names."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "apertures_", (void*)&apertures_);
      ::ROOT::GenericShowMembers("vector<LHCApertureApproximator>", (void*)&apertures_, R__insp, strcat(R__parent,"apertures_."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "x_parametrisation", &x_parametrisation);
      x_parametrisation.ShowMembers(R__insp, strcat(R__parent,"x_parametrisation.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "theta_x_parametrisation", &theta_x_parametrisation);
      theta_x_parametrisation.ShowMembers(R__insp, strcat(R__parent,"theta_x_parametrisation.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "y_parametrisation", &y_parametrisation);
      y_parametrisation.ShowMembers(R__insp, strcat(R__parent,"y_parametrisation.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "theta_y_parametrisation", &theta_y_parametrisation);
      theta_y_parametrisation.ShowMembers(R__insp, strcat(R__parent,"theta_y_parametrisation.")); R__parent[R__ncp] = 0;
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_LHCOpticsApproximator(void *p) {
      return  p ? new(p) ::LHCOpticsApproximator : new ::LHCOpticsApproximator;
   }
   static void *newArray_LHCOpticsApproximator(Long_t nElements, void *p) {
      return p ? new(p) ::LHCOpticsApproximator[nElements] : new ::LHCOpticsApproximator[nElements];
   }
   // Wrapper around operator delete
   static void delete_LHCOpticsApproximator(void *p) {
      delete ((::LHCOpticsApproximator*)p);
   }
   static void deleteArray_LHCOpticsApproximator(void *p) {
      delete [] ((::LHCOpticsApproximator*)p);
   }
   static void destruct_LHCOpticsApproximator(void *p) {
      typedef ::LHCOpticsApproximator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::LHCOpticsApproximator

//______________________________________________________________________________
void LHCApertureApproximator::Streamer(TBuffer &R__b)
{
   // Stream an object of class LHCApertureApproximator.

   if (R__b.IsReading()) {
      LHCApertureApproximator::Class()->ReadBuffer(R__b, this);
   } else {
      LHCApertureApproximator::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void LHCApertureApproximator::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class LHCApertureApproximator.
      TClass *R__cl = ::LHCApertureApproximator::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "rect_x_", &rect_x_);
      R__insp.Inspect(R__cl, R__parent, "rect_y_", &rect_y_);
      R__insp.Inspect(R__cl, R__parent, "r_el_x_", &r_el_x_);
      R__insp.Inspect(R__cl, R__parent, "r_el_y_", &r_el_y_);
      R__insp.Inspect(R__cl, R__parent, "ap_type_", &ap_type_);
      LHCOpticsApproximator::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_LHCApertureApproximator(void *p) {
      return  p ? new(p) ::LHCApertureApproximator : new ::LHCApertureApproximator;
   }
   static void *newArray_LHCApertureApproximator(Long_t nElements, void *p) {
      return p ? new(p) ::LHCApertureApproximator[nElements] : new ::LHCApertureApproximator[nElements];
   }
   // Wrapper around operator delete
   static void delete_LHCApertureApproximator(void *p) {
      delete ((::LHCApertureApproximator*)p);
   }
   static void deleteArray_LHCApertureApproximator(void *p) {
      delete [] ((::LHCApertureApproximator*)p);
   }
   static void destruct_LHCApertureApproximator(void *p) {
      typedef ::LHCApertureApproximator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::LHCApertureApproximator

namespace ROOT {
   void vectorlELHCApertureApproximatorgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlELHCApertureApproximatorgR_Dictionary();
   static void *new_vectorlELHCApertureApproximatorgR(void *p = 0);
   static void *newArray_vectorlELHCApertureApproximatorgR(Long_t size, void *p);
   static void delete_vectorlELHCApertureApproximatorgR(void *p);
   static void deleteArray_vectorlELHCApertureApproximatorgR(void *p);
   static void destruct_vectorlELHCApertureApproximatorgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<LHCApertureApproximator>*)
   {
      vector<LHCApertureApproximator> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<LHCApertureApproximator>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<LHCApertureApproximator>", ::TStreamerInfo::Class_Version(), "prec_stl/vector", 49,
                  typeid(vector<LHCApertureApproximator>), DefineBehavior(ptr, ptr),
                  0, &vectorlELHCApertureApproximatorgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<LHCApertureApproximator>) );
      instance.SetNew(&new_vectorlELHCApertureApproximatorgR);
      instance.SetNewArray(&newArray_vectorlELHCApertureApproximatorgR);
      instance.SetDelete(&delete_vectorlELHCApertureApproximatorgR);
      instance.SetDeleteArray(&deleteArray_vectorlELHCApertureApproximatorgR);
      instance.SetDestructor(&destruct_vectorlELHCApertureApproximatorgR);
      instance.AdoptStreamer(TCollectionProxy::GenClassStreamer(TCollectionProxy::Pushback< vector<LHCApertureApproximator> >()));
      instance.AdoptCollectionProxy(TCollectionProxy::GenProxy(TCollectionProxy::Pushback< vector<LHCApertureApproximator> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<LHCApertureApproximator>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlELHCApertureApproximatorgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<LHCApertureApproximator>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlELHCApertureApproximatorgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<LHCApertureApproximator> : new vector<LHCApertureApproximator>;
   }
   static void *newArray_vectorlELHCApertureApproximatorgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<LHCApertureApproximator>[nElements] : new vector<LHCApertureApproximator>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlELHCApertureApproximatorgR(void *p) {
      delete ((vector<LHCApertureApproximator>*)p);
   }
   static void deleteArray_vectorlELHCApertureApproximatorgR(void *p) {
      delete [] ((vector<LHCApertureApproximator>*)p);
   }
   static void destruct_vectorlELHCApertureApproximatorgR(void *p) {
      typedef vector<LHCApertureApproximator> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<LHCApertureApproximator>

namespace ROOT {
   void vectorlELHCOpticsApproximatorgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlELHCOpticsApproximatorgR_Dictionary();
   static void *new_vectorlELHCOpticsApproximatorgR(void *p = 0);
   static void *newArray_vectorlELHCOpticsApproximatorgR(Long_t size, void *p);
   static void delete_vectorlELHCOpticsApproximatorgR(void *p);
   static void deleteArray_vectorlELHCOpticsApproximatorgR(void *p);
   static void destruct_vectorlELHCOpticsApproximatorgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<LHCOpticsApproximator>*)
   {
      vector<LHCOpticsApproximator> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<LHCOpticsApproximator>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<LHCOpticsApproximator>", ::TStreamerInfo::Class_Version(), "prec_stl/vector", 49,
                  typeid(vector<LHCOpticsApproximator>), DefineBehavior(ptr, ptr),
                  0, &vectorlELHCOpticsApproximatorgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<LHCOpticsApproximator>) );
      instance.SetNew(&new_vectorlELHCOpticsApproximatorgR);
      instance.SetNewArray(&newArray_vectorlELHCOpticsApproximatorgR);
      instance.SetDelete(&delete_vectorlELHCOpticsApproximatorgR);
      instance.SetDeleteArray(&deleteArray_vectorlELHCOpticsApproximatorgR);
      instance.SetDestructor(&destruct_vectorlELHCOpticsApproximatorgR);
      instance.AdoptStreamer(TCollectionProxy::GenClassStreamer(TCollectionProxy::Pushback< vector<LHCOpticsApproximator> >()));
      instance.AdoptCollectionProxy(TCollectionProxy::GenProxy(TCollectionProxy::Pushback< vector<LHCOpticsApproximator> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<LHCOpticsApproximator>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlELHCOpticsApproximatorgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<LHCOpticsApproximator>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlELHCOpticsApproximatorgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<LHCOpticsApproximator> : new vector<LHCOpticsApproximator>;
   }
   static void *newArray_vectorlELHCOpticsApproximatorgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<LHCOpticsApproximator>[nElements] : new vector<LHCOpticsApproximator>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlELHCOpticsApproximatorgR(void *p) {
      delete ((vector<LHCOpticsApproximator>*)p);
   }
   static void deleteArray_vectorlELHCOpticsApproximatorgR(void *p) {
      delete [] ((vector<LHCOpticsApproximator>*)p);
   }
   static void destruct_vectorlELHCOpticsApproximatorgR(void *p) {
      typedef vector<LHCOpticsApproximator> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<LHCOpticsApproximator>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", ::TStreamerInfo::Class_Version(), "vector.dll", 0,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptStreamer(TCollectionProxy::GenClassStreamer(TCollectionProxy::Pushback< vector<int> >()));
      instance.AdoptCollectionProxy(TCollectionProxy::GenProxy(TCollectionProxy::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", ::TStreamerInfo::Class_Version(), "prec_stl/vector", 49,
                  typeid(vector<string>), DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptStreamer(TCollectionProxy::GenClassStreamer(TCollectionProxy::Pushback< vector<string> >()));
      instance.AdoptCollectionProxy(TCollectionProxy::GenProxy(TCollectionProxy::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<string>

/********************************************************
* /mnt/storage/pcoharp103/totrpsim/kuba/stub/FitCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableFitCint();

extern "C" void G__set_cpp_environmentFitCint() {
  G__add_compiledheader("TROOT.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/mnt/storage/pcoharp103/totrpsim/kuba/interface/TMultiDimFet.h");
  G__add_compiledheader("/mnt/storage/pcoharp103/totrpsim/kuba/interface/LHCOpticsApproximator.h");
  G__add_compiledheader("/mnt/storage/pcoharp103/totrpsim/kuba/interface/TNtupleDcorr.h");
  G__cpp_reset_tagtableFitCint();
}
#include <new>
extern "C" int G__cpp_dllrevFitCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TMultiDimFet */
static int G__FitCint_513_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMultiDimFet* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new TMultiDimFet[n];
     } else {
       p = new((void*) gvp) TMultiDimFet[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new TMultiDimFet;
     } else {
       p = new((void*) gvp) TMultiDimFet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMultiDimFet& obj = ((TMultiDimFet*) G__getstructoffset())->operator=(*(TMultiDimFet*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TMultiDimFet* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new TMultiDimFet(
(Int_t) G__int(libp->para[0]), (TMultiDimFet::EMDFPolyType) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TMultiDimFet(
(Int_t) G__int(libp->para[0]), (TMultiDimFet::EMDFPolyType) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new TMultiDimFet((Int_t) G__int(libp->para[0]), (TMultiDimFet::EMDFPolyType) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TMultiDimFet((Int_t) G__int(libp->para[0]), (TMultiDimFet::EMDFPolyType) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new TMultiDimFet((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TMultiDimFet((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TMultiDimFet*) G__getstructoffset())->AddRow((const Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TMultiDimFet*) G__getstructoffset())->AddRow((const Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TMultiDimFet*) G__getstructoffset())->AddTestRow((const Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TMultiDimFet*) G__getstructoffset())->AddTestRow((const Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMultiDimFet*) G__getstructoffset())->Browse((TBrowser*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMultiDimFet*) G__getstructoffset())->Clear((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMultiDimFet*) G__getstructoffset())->Clear();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMultiDimFet*) G__getstructoffset())->Draw((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMultiDimFet*) G__getstructoffset())->Draw();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((TMultiDimFet*) G__getstructoffset())->Eval((const Double_t*) G__int(libp->para[0]), (const Double_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((TMultiDimFet*) G__getstructoffset())->Eval((const Double_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMultiDimFet*) G__getstructoffset())->FindParameterization((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMultiDimFet*) G__getstructoffset())->ReleaseMemory();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMultiDimFet*) G__getstructoffset())->Fit((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMultiDimFet*) G__getstructoffset())->Fit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMultiDimFet*) G__getstructoffset())->GetCorrelationMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMultiDimFet*) G__getstructoffset())->GetCoefficients());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>* pobj;
         const vector<Int_t> xobj = ((const TMultiDimFet*) G__getstructoffset())->GetFunctionCodes();
         pobj = new vector<Int_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMultiDimFet*) G__getstructoffset())->GetFunctions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMultiDimFet*) G__getstructoffset())->GetHistograms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetMaxAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMultiDimFet*) G__getstructoffset())->GetMaxFunctions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>* pobj;
         const vector<Int_t> xobj = ((const TMultiDimFet*) G__getstructoffset())->GetMaxPowers();
         pobj = new vector<Int_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetMaxQuantity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMultiDimFet*) G__getstructoffset())->GetMaxStudy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMultiDimFet*) G__getstructoffset())->GetMaxTerms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMultiDimFet*) G__getstructoffset())->GetMaxVariables());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetMeanQuantity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMultiDimFet*) G__getstructoffset())->GetMeanVariables());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetMinAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetMinQuantity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetMinRelativeError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMultiDimFet*) G__getstructoffset())->GetMinVariables());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMultiDimFet*) G__getstructoffset())->GetNVariables());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMultiDimFet*) G__getstructoffset())->GetNCoefficients());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMultiDimFet*) G__getstructoffset())->GetPolyType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>* pobj;
         const vector<Int_t> xobj = ((const TMultiDimFet*) G__getstructoffset())->GetPowerIndex();
         pobj = new vector<Int_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetPowerLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>* pobj;
         const vector<Int_t> xobj = ((const TMultiDimFet*) G__getstructoffset())->GetPowers();
         pobj = new vector<Int_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetPrecision());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMultiDimFet*) G__getstructoffset())->GetQuantity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetResidualMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetResidualMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMultiDimFet*) G__getstructoffset())->GetResidualMaxRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMultiDimFet*) G__getstructoffset())->GetResidualMinRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetResidualSumSq());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMultiDimFet*) G__getstructoffset())->GetSampleSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMultiDimFet*) G__getstructoffset())->GetSqError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetSumSqAvgQuantity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetSumSqQuantity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetTestError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TMultiDimFet*) G__getstructoffset())->GetTestPrecision());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMultiDimFet*) G__getstructoffset())->GetTestQuantity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TMultiDimFet*) G__getstructoffset())->GetTestSampleSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMultiDimFet*) G__getstructoffset())->GetTestSqError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMultiDimFet*) G__getstructoffset())->GetTestVariables());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMultiDimFet*) G__getstructoffset())->GetVariables());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMultiDimFet::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TMultiDimFet*) G__getstructoffset())->IsFolder());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((TMultiDimFet*) G__getstructoffset())->MakeChi2((const Double_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((TMultiDimFet*) G__getstructoffset())->MakeChi2());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TMultiDimFet*) G__getstructoffset())->MakeCode((const char*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TMultiDimFet*) G__getstructoffset())->MakeCode((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMultiDimFet*) G__getstructoffset())->MakeCode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMultiDimFet*) G__getstructoffset())->MakeHistograms((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMultiDimFet*) G__getstructoffset())->MakeHistograms();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((TMultiDimFet*) G__getstructoffset())->MakeMethod((const Char_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TMultiDimFet*) G__getstructoffset())->MakeMethod((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMultiDimFet*) G__getstructoffset())->MakeMethod();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const TMultiDimFet*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const TMultiDimFet*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const TMultiDimFet*) G__getstructoffset())->PrintPolynomialsSpecial((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const TMultiDimFet*) G__getstructoffset())->PrintPolynomialsSpecial();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMultiDimFet*) G__getstructoffset())->SetMaxAngle((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMultiDimFet*) G__getstructoffset())->SetMaxAngle();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMultiDimFet*) G__getstructoffset())->SetMaxFunctions((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMultiDimFet*) G__getstructoffset())->SetMaxPowers((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMultiDimFet*) G__getstructoffset())->SetMaxStudy((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMultiDimFet*) G__getstructoffset())->SetMaxTerms((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMultiDimFet*) G__getstructoffset())->SetMinRelativeError((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMultiDimFet*) G__getstructoffset())->SetMinAngle((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMultiDimFet*) G__getstructoffset())->SetMinAngle();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TMultiDimFet*) G__getstructoffset())->SetPowerLimit((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TMultiDimFet*) G__getstructoffset())->SetPowerLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMultiDimFet*) G__getstructoffset())->SetPowers((const Int_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMultiDimFet*) G__getstructoffset())->ReducePolynomial((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMultiDimFet*) G__getstructoffset())->ZeroDoubiousCoefficients((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TMultiDimFet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMultiDimFet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TMultiDimFet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TMultiDimFet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TMultiDimFet*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMultiDimFet*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMultiDimFet*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TMultiDimFet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMultiDimFet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMultiDimFet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TMultiDimFet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_513_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TMultiDimFet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FitCint_513_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TMultiDimFet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TMultiDimFet(*(TMultiDimFet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMultiDimFet G__TTMultiDimFet;
static int G__FitCint_513_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (TMultiDimFet*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TMultiDimFet*) (soff+(sizeof(TMultiDimFet)*i)))->~G__TTMultiDimFet();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (TMultiDimFet*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((TMultiDimFet*) (soff))->~G__TTMultiDimFet();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LHCApertureApproximator */
static int G__FitCint_585_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCApertureApproximator* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new LHCApertureApproximator[n];
     } else {
       p = new((void*) gvp) LHCApertureApproximator[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new LHCApertureApproximator;
     } else {
       p = new((void*) gvp) LHCApertureApproximator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_585_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCApertureApproximator* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new LHCApertureApproximator(
*(LHCOpticsApproximator*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (LHCApertureApproximator::aperture_type) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) LHCApertureApproximator(
*(LHCOpticsApproximator*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (LHCApertureApproximator::aperture_type) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new LHCApertureApproximator(
*(LHCOpticsApproximator*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) LHCApertureApproximator(
*(LHCOpticsApproximator*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_585_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((LHCApertureApproximator*) G__getstructoffset())->CheckAperture((double*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_585_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) LHCApertureApproximator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_585_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHCApertureApproximator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_585_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) LHCApertureApproximator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_585_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      LHCApertureApproximator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_585_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const LHCApertureApproximator*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_585_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LHCApertureApproximator*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_585_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LHCApertureApproximator*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_585_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LHCApertureApproximator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_585_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHCApertureApproximator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_585_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHCApertureApproximator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_585_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHCApertureApproximator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_585_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHCApertureApproximator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FitCint_585_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   LHCApertureApproximator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new LHCApertureApproximator(*(LHCApertureApproximator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LHCApertureApproximator G__TLHCApertureApproximator;
static int G__FitCint_585_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (LHCApertureApproximator*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LHCApertureApproximator*) (soff+(sizeof(LHCApertureApproximator)*i)))->~G__TLHCApertureApproximator();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (LHCApertureApproximator*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((LHCApertureApproximator*) (soff))->~G__TLHCApertureApproximator();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FitCint_585_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCApertureApproximator* dest = (LHCApertureApproximator*) G__getstructoffset();
   *dest = *(LHCApertureApproximator*) libp->para[0].ref;
   const LHCApertureApproximator& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LHCOpticsApproximator */
static int G__FitCint_586_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCOpticsApproximator* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new LHCOpticsApproximator[n];
     } else {
       p = new((void*) gvp) LHCOpticsApproximator[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new LHCOpticsApproximator;
     } else {
       p = new((void*) gvp) LHCOpticsApproximator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCOpticsApproximator* p = NULL;
   long gvp = G__getgvp();
   //m: 5
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new LHCOpticsApproximator(
*((string*) G__int(libp->para[0])), *((string*) G__int(libp->para[1]))
, (TMultiDimFet::EMDFPolyType) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, (double) G__double(libp->para[4]));
   } else {
     p = new((void*) gvp) LHCOpticsApproximator(
*((string*) G__int(libp->para[0])), *((string*) G__int(libp->para[1]))
, (TMultiDimFet::EMDFPolyType) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, (double) G__double(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCOpticsApproximator* p = NULL;
   long gvp = G__getgvp();
   //m: 1
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new LHCOpticsApproximator(*(LHCOpticsApproximator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) LHCOpticsApproximator(*(LHCOpticsApproximator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const LHCOpticsApproximator& obj = ((LHCOpticsApproximator*) G__getstructoffset())->operator=(*(LHCOpticsApproximator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      ((LHCOpticsApproximator*) G__getstructoffset())->Train(
(TTree*) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (LHCOpticsApproximator::polynomials_selection) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (bool) G__int(libp->para[7])
, (double*) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((LHCOpticsApproximator*) G__getstructoffset())->Train(
(TTree*) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (LHCOpticsApproximator::polynomials_selection) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (bool) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((LHCOpticsApproximator*) G__getstructoffset())->Train(
(TTree*) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (LHCOpticsApproximator::polynomials_selection) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((LHCOpticsApproximator*) G__getstructoffset())->Train((TTree*) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (LHCOpticsApproximator::polynomials_selection) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((LHCOpticsApproximator*) G__getstructoffset())->Train((TTree*) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (LHCOpticsApproximator::polynomials_selection) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((LHCOpticsApproximator*) G__getstructoffset())->Train((TTree*) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (LHCOpticsApproximator::polynomials_selection) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((LHCOpticsApproximator*) G__getstructoffset())->Train((TTree*) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (LHCOpticsApproximator::polynomials_selection) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((LHCOpticsApproximator*) G__getstructoffset())->Train((TTree*) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((LHCOpticsApproximator*) G__getstructoffset())->Train((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((LHCOpticsApproximator*) G__getstructoffset())->Test((TTree*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1])
, *((string*) G__int(libp->para[2])), *((string*) G__int(libp->para[3])));
      G__setnull(result7);
      break;
   case 3:
      ((LHCOpticsApproximator*) G__getstructoffset())->Test((TTree*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1])
, *((string*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      ((LHCOpticsApproximator*) G__getstructoffset())->Test((TTree*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LHCOpticsApproximator*) G__getstructoffset())->TestAperture((TTree*) G__int(libp->para[0]), (TTree*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((LHCOpticsApproximator*) G__getstructoffset())->Transport((const MadKinematicDescriptor*) G__int(libp->para[0]), (MadKinematicDescriptor*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((LHCOpticsApproximator*) G__getstructoffset())->Transport((const MadKinematicDescriptor*) G__int(libp->para[0]), (MadKinematicDescriptor*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((LHCOpticsApproximator*) G__getstructoffset())->Transport((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((LHCOpticsApproximator*) G__getstructoffset())->Transport((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((LHCOpticsApproximator*) G__getstructoffset())->Transport_m_GeV((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (double*) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (double) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LHCOpticsApproximator*) G__getstructoffset())->PrintInputRange();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((LHCOpticsApproximator*) G__getstructoffset())->CheckInputRange((double*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LHCOpticsApproximator*) G__getstructoffset())->AddRectEllipseAperture(*(LHCOpticsApproximator*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LHCOpticsApproximator*) G__getstructoffset())->PrintOpticalFunctions();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LHCOpticsApproximator*) G__getstructoffset())->PrintCoordinateOpticalFunctions(*(TMultiDimFet*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(vector<std::string>*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((LHCOpticsApproximator*) G__getstructoffset())->GetLineariasedTransportMatrixX(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), *(TMatrixD*) libp->para[5].ref
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((LHCOpticsApproximator*) G__getstructoffset())->GetLineariasedTransportMatrixX(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), *(TMatrixD*) libp->para[5].ref
, (double) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((LHCOpticsApproximator*) G__getstructoffset())->GetLineariasedTransportMatrixX((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), *(TMatrixD*) libp->para[5].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((LHCOpticsApproximator*) G__getstructoffset())->GetLineariasedTransportMatrixY(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), *(TMatrixD*) libp->para[5].ref
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((LHCOpticsApproximator*) G__getstructoffset())->GetLineariasedTransportMatrixY(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), *(TMatrixD*) libp->para[5].ref
, (double) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((LHCOpticsApproximator*) G__getstructoffset())->GetLineariasedTransportMatrixY((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), *(TMatrixD*) libp->para[5].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 100, (double) ((LHCOpticsApproximator*) G__getstructoffset())->GetDx((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) ((LHCOpticsApproximator*) G__getstructoffset())->GetDx((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 100, (double) ((LHCOpticsApproximator*) G__getstructoffset())->GetDxds((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) ((LHCOpticsApproximator*) G__getstructoffset())->GetDxds((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<LHCApertureApproximator>* pobj;
         vector<LHCApertureApproximator> xobj = ((LHCOpticsApproximator*) G__getstructoffset())->GetApertures();
         pobj = new vector<LHCApertureApproximator>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) LHCOpticsApproximator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHCOpticsApproximator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) LHCOpticsApproximator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      LHCOpticsApproximator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const LHCOpticsApproximator*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LHCOpticsApproximator*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LHCOpticsApproximator*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LHCOpticsApproximator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHCOpticsApproximator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHCOpticsApproximator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHCOpticsApproximator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_586_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHCOpticsApproximator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LHCOpticsApproximator G__TLHCOpticsApproximator;
static int G__FitCint_586_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (LHCOpticsApproximator*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LHCOpticsApproximator*) (soff+(sizeof(LHCOpticsApproximator)*i)))->~G__TLHCOpticsApproximator();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (LHCOpticsApproximator*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((LHCOpticsApproximator*) (soff))->~G__TLHCOpticsApproximator();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<LHCApertureApproximator,allocator<LHCApertureApproximator> > */
static int G__FitCint_594_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const LHCApertureApproximator& obj = ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->at((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator* pobj;
         vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator xobj = ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->begin();
         pobj = new vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator* pobj;
         vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator xobj = ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->end();
         pobj = new vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::reverse_iterator* pobj;
         vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::reverse_iterator xobj = ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->rbegin();
         pobj = new vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::reverse_iterator* pobj;
         vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::reverse_iterator xobj = ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->rend();
         pobj = new vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->resize((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->resize((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type) G__int(libp->para[0]), *((LHCApertureApproximator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const LHCApertureApproximator& obj = ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->operator[]((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >[n];
     } else {
       p = new((void*) gvp) vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >;
     } else {
       p = new((void*) gvp) vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type) G__int(libp->para[0]), *(LHCApertureApproximator*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type) G__int(libp->para[0]), *(LHCApertureApproximator*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >* p = NULL;
   long gvp = G__getgvp();
   //m: 1
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >(*(vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >(*(vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >* p = NULL;
   long gvp = G__getgvp();
   //m: 2
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >(*((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::const_iterator*) G__int(libp->para[0])), *((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >(*((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::const_iterator*) G__int(libp->para[0])), *((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >& obj = ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->operator=(*(vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->reserve((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const LHCApertureApproximator& obj = ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const LHCApertureApproximator& obj = ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->push_back(*(LHCApertureApproximator*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->swap(*(vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator* pobj;
         vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator xobj = ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->insert(*((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator*) G__int(libp->para[0])), *(LHCApertureApproximator*) libp->para[1].ref);
         pobj = new vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->insert(*((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator*) G__int(libp->para[0])), *((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::const_iterator*) G__int(libp->para[1]))
, *((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->insert(*((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator*) G__int(libp->para[0])), (vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type) G__int(libp->para[1])
, *(LHCApertureApproximator*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->erase(*((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->erase(*((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator*) G__int(libp->para[0])), *((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_594_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<LHCApertureApproximator,allocator<LHCApertureApproximator> > G__TvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR;
static int G__FitCint_594_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) (soff+(sizeof(vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >)*i)))->~G__TvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*) (soff))->~G__TvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TNtupleDcorr */
static int G__FitCint_603_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TNtupleDcorr* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new TNtupleDcorr[n];
     } else {
       p = new((void*) gvp) TNtupleDcorr[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new TNtupleDcorr;
     } else {
       p = new((void*) gvp) TNtupleDcorr;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TNtupleDcorr* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new TNtupleDcorr(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TNtupleDcorr(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new TNtupleDcorr(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TNtupleDcorr(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNtupleDcorr*) G__getstructoffset())->Browse((TBrowser*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill((const Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 15:
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14])));
      break;
   case 14:
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])));
      break;
   case 13:
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12])));
      break;
   case 12:
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])));
      break;
   case 11:
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10])));
      break;
   case 10:
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((TNtupleDcorr*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TNtupleDcorr*) G__getstructoffset())->GetNvar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const TNtupleDcorr*) G__getstructoffset())->GetArgs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNtupleDcorr*) G__getstructoffset())->ResetBranchAddress((TBranch*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNtupleDcorr*) G__getstructoffset())->ResetBranchAddresses();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TNtupleDcorr::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TNtupleDcorr::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TNtupleDcorr::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TNtupleDcorr::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TNtupleDcorr*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNtupleDcorr*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNtupleDcorr*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TNtupleDcorr*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TNtupleDcorr::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TNtupleDcorr::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TNtupleDcorr::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_603_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TNtupleDcorr::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TNtupleDcorr G__TTNtupleDcorr;
static int G__FitCint_603_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (TNtupleDcorr*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TNtupleDcorr*) (soff+(sizeof(TNtupleDcorr)*i)))->~G__TTNtupleDcorr();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (TNtupleDcorr*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((TNtupleDcorr*) (soff))->~G__TTNtupleDcorr();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> > */
static int G__FitCint_605_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const LHCOpticsApproximator& obj = ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->at((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator* pobj;
         vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator xobj = ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->begin();
         pobj = new vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator* pobj;
         vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator xobj = ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->end();
         pobj = new vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::reverse_iterator* pobj;
         vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::reverse_iterator xobj = ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->rbegin();
         pobj = new vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::reverse_iterator* pobj;
         vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::reverse_iterator xobj = ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->rend();
         pobj = new vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->resize((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->resize((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type) G__int(libp->para[0]), *((LHCOpticsApproximator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const LHCOpticsApproximator& obj = ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->operator[]((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >[n];
     } else {
       p = new((void*) gvp) vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >;
     } else {
       p = new((void*) gvp) vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >* p = NULL;
   long gvp = G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type) G__int(libp->para[0]), *(LHCOpticsApproximator*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type) G__int(libp->para[0]), *(LHCOpticsApproximator*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >* p = NULL;
   long gvp = G__getgvp();
   //m: 1
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >(*(vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >(*(vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >* p = NULL;
   long gvp = G__getgvp();
   //m: 2
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >(*((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::const_iterator*) G__int(libp->para[0])), *((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >(*((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::const_iterator*) G__int(libp->para[0])), *((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >& obj = ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->operator=(*(vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->reserve((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const LHCOpticsApproximator& obj = ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const LHCOpticsApproximator& obj = ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->push_back(*(LHCOpticsApproximator*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->swap(*(vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator* pobj;
         vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator xobj = ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->insert(*((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator*) G__int(libp->para[0])), *(LHCOpticsApproximator*) libp->para[1].ref);
         pobj = new vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->insert(*((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator*) G__int(libp->para[0])), *((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::const_iterator*) G__int(libp->para[1]))
, *((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->insert(*((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator*) G__int(libp->para[0])), (vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type) G__int(libp->para[1])
, *(LHCOpticsApproximator*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->erase(*((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->erase(*((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator*) G__int(libp->para[0])), *((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitCint_605_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> > G__TvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR;
static int G__FitCint_605_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) (soff+(sizeof(vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >)*i)))->~G__TvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*) (soff))->~G__TvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TMultiDimFet */

/* LHCApertureApproximator */

/* LHCOpticsApproximator */

/* vector<LHCApertureApproximator,allocator<LHCApertureApproximator> > */

/* TNtupleDcorr */

/* vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncFitCint {
 public:
  G__Sizep2memfuncFitCint() {p=&G__Sizep2memfuncFitCint::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncFitCint::*p)();
};

size_t G__get_sizep2memfuncFitCint()
{
  G__Sizep2memfuncFitCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceFitCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet))) {
     TMultiDimFet *G__Lderived;
     G__Lderived=(TMultiDimFet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet),G__get_linked_tagnum(&G__FitCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet),G__get_linked_tagnum(&G__FitCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator))) {
     LHCApertureApproximator *G__Lderived;
     G__Lderived=(LHCApertureApproximator*)0x1000;
     {
       LHCOpticsApproximator *G__Lpbase=(LHCOpticsApproximator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator),G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator),G__get_linked_tagnum(&G__FitCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator),G__get_linked_tagnum(&G__FitCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator))) {
     LHCOpticsApproximator *G__Lderived;
     G__Lderived=(LHCOpticsApproximator*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator),G__get_linked_tagnum(&G__FitCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator),G__get_linked_tagnum(&G__FitCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr))) {
     TNtupleDcorr *G__Lderived;
     G__Lderived=(TNtupleDcorr*)0x1000;
     {
       TTree *G__Lpbase=(TTree*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr),G__get_linked_tagnum(&G__FitCintLN_TTree),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr),G__get_linked_tagnum(&G__FitCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr),G__get_linked_tagnum(&G__FitCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr),G__get_linked_tagnum(&G__FitCintLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr),G__get_linked_tagnum(&G__FitCintLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr),G__get_linked_tagnum(&G__FitCintLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableFitCint() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<TStreamerInfo*>",117,G__get_linked_tagnum(&G__FitCintLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitCintLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitCintLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<void*,Version_t>",117,G__get_linked_tagnum(&G__FitCintLN_multimaplEvoidmUcOshortcOlesslEvoidmUgRcOallocatorlEpairlEvoidmUsPconstcOshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<void*,short>",117,G__get_linked_tagnum(&G__FitCintLN_multimaplEvoidmUcOshortcOlesslEvoidmUgRcOallocatorlEpairlEvoidmUsPconstcOshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<void*,short,less<void*>>",117,G__get_linked_tagnum(&G__FitCintLN_multimaplEvoidmUcOshortcOlesslEvoidmUgRcOallocatorlEpairlEvoidmUsPconstcOshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorD",117,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixD",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparse<Double_t>",117,G__get_linked_tagnum(&G__FitCintLN_TMatrixTSparselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__FitCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__FitCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__FitCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<LHCApertureApproximator>",117,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator),0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator),0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator),256,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator),1,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator),257,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TMultiDimFet*>",117,G__get_linked_tagnum(&G__FitCintLN_vectorlETMultiDimFetmUcOallocatorlETMultiDimFetmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlETMultiDimFetmUcOallocatorlETMultiDimFetmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitCintLN_vectorlETMultiDimFetmUcOallocatorlETMultiDimFetmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlETMultiDimFetmUcOallocatorlETMultiDimFetmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitCintLN_vectorlETMultiDimFetmUcOallocatorlETMultiDimFetmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<LHCOpticsApproximator>",117,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator),0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator),0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator),256,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator),1,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator),257,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TMultiDimFet */
static void G__setup_memvarTMultiDimFet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet));
   { TMultiDimFet *p; p=(TMultiDimFet*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FitCintLN_TMultiDimFetcLcLEMDFPolyType),-1,-2,1,"kMonomials=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FitCintLN_TMultiDimFetcLcLEMDFPolyType),-1,-2,1,"kChebyshev=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FitCintLN_TMultiDimFetcLcLEMDFPolyType),-1,-2,1,"kLegendre=2",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet),-1,-2,4,"fgInstance=",0,"! Static instance");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"fQuantity=",0,"! Training sample, dependent quantity");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"fSqError=",0,"! Training sample, error in quantity");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMeanQuantity=",0,"Mean of dependent quantity");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxQuantity=",0,"! Max value of dependent quantity");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMinQuantity=",0,"! Min value of dependent quantity");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSumSqQuantity=",0,"! SumSquare of dependent quantity");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSumSqAvgQuantity=",0,"! Sum of squares away from mean");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"fVariables=",0,"! Training sample, independent variables");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNVariables=",0,"Number of independent variables");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"fMeanVariables=",0,"! mean value of independent variables");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"fMaxVariables=",0,"max value of independent variables");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"fMinVariables=",0,"min value of independent variables");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSampleSize=",0,"! Size of training sample");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"fTestQuantity=",0,"! Test sample, dependent quantity");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"fTestSqError=",0,"! Test sample, Error in quantity");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"fTestVariables=",0,"! Test sample, independent variables");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTestSampleSize=",0,"! Size of test sample");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMinAngle=",0,"! Min angle for acepting new function");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxAngle=",0,"! Max angle for acepting new function");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxTerms=",0,"Max terms expected in final expr.");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMinRelativeError=",0,"! Min relative error accepted");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fMaxPowers=",0,"! maximum powers, ex-array");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPowerLimit=",0,"! Control parameter");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,2,"fFunctions=",0,"! Functions evaluated over sample");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxFunctions=",0,"max number of functions");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fFunctionCodes=",0,"! acceptance code, ex-array");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxStudy=",0,"! max functions to study");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,2,"fOrthFunctions=",0,"! As above, but orthogonalised");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"fOrthFunctionNorms=",0,"! Norm of the evaluated functions");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fMaxPowersFinal=",0,"! maximum powers from fit, ex-array");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxFunctionsTimesNVariables=",0,"fMaxFunctionsTimesNVariables");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fPowers=",0,"ex-array");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fPowerIndex=",0,"Index of accepted powers, ex-array");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"fResiduals=",0,"! Vector of the final residuals");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxResidual=",0,"! Max redsidual value");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMinResidual=",0,"! Min redsidual value");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxResidualRow=",0,"! Row giving max residual");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMinResidualRow=",0,"! Row giving min residual");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSumSqResidual=",0,"! Sum of Square residuals");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNCoefficients=",0,"Dimension of model coefficients");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"fOrthCoefficients=",0,"! The model coefficients");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,2,"fOrthCurvatureMatrix=",0,"! Model matrix");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"fCoefficients=",0,"Vector of the final coefficients");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"fCoefficientsRMS=",0,"! Vector of RMS of coefficients");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRMS=",0,"! Root mean square of fit");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fChi2=",0,"! Chi square of fit");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fParameterisationCode=",0,"! Exit code of parameterisation");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fError=",0,"! Error from parameterization");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTestError=",0,"! Error from test");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPrecision=",0,"! Relative precision of param");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTestPrecision=",0,"! Relative precision of test");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCorrelationCoeff=",0,"! Multi Correlation coefficient");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,2,"fCorrelationMatrix=",0,"! Correlation matrix");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTestCorrelationCoeff=",0,"! Multi Correlation coefficient");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__FitCintLN_TList),-1,-1,2,"fHistograms=",0,"! List of histograms");
   G__memvar_setup((void*)NULL,98,0,0,-1,G__defined_typename("Byte_t"),-1,2,"fHistogramMask=",0,"! Bit pattern of hisograms used");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__FitCintLN_TVirtualFitter),-1,-1,2,"fFitter=",0,"! Fit object (MINUIT)");
   G__memvar_setup((void*)NULL,105,0,0,G__get_linked_tagnum(&G__FitCintLN_TMultiDimFetcLcLEMDFPolyType),-1,-1,2,"fPolyType=",0,"Type of polynomials to use");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fShowCorrelation=",0,"print correlation matrix");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsUserFunction=",0,"Flag for user defined function");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsVerbose=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__FitCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* LHCApertureApproximator */
static void G__setup_memvarLHCApertureApproximator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator));
   { LHCApertureApproximator *p; p=(LHCApertureApproximator*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximatorcLcLaperture_type),-1,-2,1,"NO_APERTURE=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximatorcLcLaperture_type),-1,-2,1,"RECTELLIPSE=1",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"rect_x_=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"rect_y_=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"r_el_x_=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"r_el_y_=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximatorcLcLaperture_type),-1,-1,4,"ap_type_=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__FitCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* LHCOpticsApproximator */
static void G__setup_memvarLHCOpticsApproximator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator));
   { LHCOpticsApproximator *p; p=(LHCOpticsApproximator*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximatorcLcLpolynomials_selection),-1,-2,1,"AUTOMATIC=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximatorcLcLpolynomials_selection),-1,-2,1,"PREDEFINED=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximatorcLcLbeam_type),-1,-2,1,"lhcb1=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximatorcLcLbeam_type),-1,-2,1,"lhcb2=1",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"s_begin_=",0,"begin of transport along the reference orbit");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"s_end_=",0,"end of transport along the reference orbit");
   G__memvar_setup((void*)NULL,105,0,0,G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximatorcLcLbeam_type),-1,-1,4,"beam=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"nominal_beam_energy_=",0,"GeV");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"nominal_beam_momentum_=",0,"GeV/c");
   G__memvar_setup((void*)NULL,103,0,0,-1,-1,-1,4,"trained_=",0,"trained polynomials");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_vectorlETMultiDimFetmUcOallocatorlETMultiDimFetmUgRsPgR),G__defined_typename("vector<TMultiDimFet*>"),-1,4,"out_polynomials=",0,"! pointers to polynomials");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,4,"coord_names=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR),G__defined_typename("vector<LHCApertureApproximator>"),-1,4,"apertures_=",0,"apertures on the way");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet),-1,-1,4,"x_parametrisation=",0,"polynomial approximation for x");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet),-1,-1,4,"theta_x_parametrisation=",0,"polynomial approximation for theta_x");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet),-1,-1,4,"y_parametrisation=",0,"polynomial approximation for y");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet),-1,-1,4,"theta_y_parametrisation=",0,"polynomial approximation for theta_y");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximatorcLcLvariable_type),-1,-2,1,"X=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximatorcLcLvariable_type),-1,-2,1,"THETA_X=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximatorcLcLvariable_type),-1,-2,1,"Y=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximatorcLcLvariable_type),-1,-2,1,"THETA_Y=3",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__FitCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<LHCApertureApproximator,allocator<LHCApertureApproximator> > */
static void G__setup_memvarvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR));
   { vector<LHCApertureApproximator,allocator<LHCApertureApproximator> > *p; p=(vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* TNtupleDcorr */
static void G__setup_memvarTNtupleDcorr(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr));
   { TNtupleDcorr *p; p=(TNtupleDcorr*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNvar=",0,"Number of columns");
   G__memvar_setup((void*)NULL,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fArgs=",0,"! [fNvar] Array of variables");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__FitCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> > */
static void G__setup_memvarvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR));
   { vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> > *p; p=(vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarFitCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTMultiDimFet(void) {
   /* TMultiDimFet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet));
   G__memfunc_setup("EvalFactor",999,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - p d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EvalControl",1129,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 2, 0, "I - 'Int_t' 10 - powers", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCoefficientErrors",2138,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCorrelation",1536,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeGramSchmidt",1489,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - function", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCoefficients",1616,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCandidates",1390,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeNormalized",1427,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeParameterization",2077,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeRealCode",1149,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"C - - 10 - filename C - - 10 - classname "
"C - 'Option_t' 10 \"\" option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Select",608,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "I - 'Int_t' 10 - iv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TestFunction",1254,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"d - 'Double_t' 0 - squareResidual d - 'Double_t' 0 - dResidur", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TMultiDimFet",1176,G__FitCint_513_0_13, 105, G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__FitCint_513_0_14, 117, G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet), -1, 1, 1, 1, 1, 1, "u 'TMultiDimFet' - 11 - in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TMultiDimFet",1176,G__FitCint_513_0_15, 105, G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - dimension i 'TMultiDimFet::EMDFPolyType' - 0 kMonomials type "
"C - 'Option_t' 10 \"\" option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRow",577,G__FitCint_513_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 10 - x d - 'Double_t' 0 - D "
"d - 'Double_t' 0 0 E", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddTestRow",993,G__FitCint_513_0_17, 121, -1, -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 10 - x d - 'Double_t' 0 - D "
"d - 'Double_t' 0 0 E", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Browse",626,G__FitCint_513_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,G__FitCint_513_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 \"\" option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Draw",398,G__FitCint_513_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 \"d\" -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Eval",392,G__FitCint_513_0_21, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - x D - 'Double_t' 10 0 coeff", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindParameterization",2080,G__FitCint_513_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - precision", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("ReleaseMemory",1338,G__FitCint_513_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fit",291,G__FitCint_513_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 \"\" option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("GetChi2",614,G__FitCint_513_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCorrelationMatrix",2071,G__FitCint_513_0_26, 85, G__get_linked_tagnum(&G__FitCintLN_TMatrixTlEdoublegR), G__defined_typename("TMatrixD"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoefficients",1522,G__FitCint_513_0_27, 85, G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetError",810,G__FitCint_513_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFunctionCodes",1620,G__FitCint_513_0_29, 117, G__get_linked_tagnum(&G__FitCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFunctions",1241,G__FitCint_513_0_30, 85, G__get_linked_tagnum(&G__FitCintLN_TMatrixTlEdoublegR), G__defined_typename("TMatrixD"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistograms",1345,G__FitCint_513_0_31, 85, G__get_linked_tagnum(&G__FitCintLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMaxAngle",1069,G__FitCint_513_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxFunctions",1535,G__FitCint_513_0_33, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxPowers",1222,G__FitCint_513_0_34, 117, G__get_linked_tagnum(&G__FitCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxQuantity",1445,G__FitCint_513_0_35, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxStudy",1119,G__FitCint_513_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxTerms",1105,G__FitCint_513_0_37, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxVariables",1503,G__FitCint_513_0_38, 85, G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanQuantity",1536,G__FitCint_513_0_39, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanVariables",1594,G__FitCint_513_0_40, 85, G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinAngle",1067,G__FitCint_513_0_41, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinQuantity",1443,G__FitCint_513_0_42, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinRelativeError",1930,G__FitCint_513_0_43, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinVariables",1501,G__FitCint_513_0_44, 85, G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNVariables",1287,G__FitCint_513_0_45, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNCoefficients",1600,G__FitCint_513_0_46, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPolyType",1126,G__FitCint_513_0_47, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPowerIndex",1317,G__FitCint_513_0_48, 117, G__get_linked_tagnum(&G__FitCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPowerLimit",1324,G__FitCint_513_0_49, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPowers",928,G__FitCint_513_0_50, 117, G__get_linked_tagnum(&G__FitCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrecision",1228,G__FitCint_513_0_51, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQuantity",1151,G__FitCint_513_0_52, 85, G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResidualMax",1407,G__FitCint_513_0_53, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResidualMin",1405,G__FitCint_513_0_54, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResidualMaxRow",1719,G__FitCint_513_0_55, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResidualMinRow",1717,G__FitCint_513_0_56, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResidualSumSq",1618,G__FitCint_513_0_57, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRMS",530,G__FitCint_513_0_58, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSampleSize",1309,G__FitCint_513_0_59, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSqError",1006,G__FitCint_513_0_60, 85, G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSumSqAvgQuantity",1942,G__FitCint_513_0_61, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSumSqQuantity",1656,G__FitCint_513_0_62, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTestError",1226,G__FitCint_513_0_63, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTestPrecision",1644,G__FitCint_513_0_64, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTestQuantity",1567,G__FitCint_513_0_65, 85, G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTestSampleSize",1725,G__FitCint_513_0_66, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTestSqError",1422,G__FitCint_513_0_67, 85, G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTestVariables",1625,G__FitCint_513_0_68, 85, G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVariables",1209,G__FitCint_513_0_69, 85, G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__FitCint_513_0_70, 85, G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TMultiDimFet* (*)())(&TMultiDimFet::Instance), 0);
   G__memfunc_setup("IsFolder",792,G__FitCint_513_0_71, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeChi2",708,G__FitCint_513_0_72, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "D - 'Double_t' 10 0 coeff", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeCode",761,G__FitCint_513_0_73, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 \"MDF\" functionName C - 'Option_t' 10 \"\" option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("MakeHistograms",1439,G__FitCint_513_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 \"A\" option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("MakeMethod",991,G__FitCint_513_0_75, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 \"MDF\" className C - 'Option_t' 10 \"\" option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__FitCint_513_0_76, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 \"ps\" option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("PrintPolynomialsSpecial",2405,G__FitCint_513_0_77, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 \"m\" option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetMaxAngle",1081,G__FitCint_513_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 0 angle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxFunctions",1547,G__FitCint_513_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxPowers",1234,G__FitCint_513_0_80, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - powers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxStudy",1131,G__FitCint_513_0_81, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxTerms",1117,G__FitCint_513_0_82, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - terms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinRelativeError",1942,G__FitCint_513_0_83, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - error", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinAngle",1079,G__FitCint_513_0_84, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 1 angle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPowerLimit",1336,G__FitCint_513_0_85, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 1e-3 limit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPowers",940,G__FitCint_513_0_86, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'Int_t' 10 - powers i - 'Int_t' 0 - terms", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReducePolynomial",1660,G__FitCint_513_0_87, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - error", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZeroDoubiousCoefficients",2492,G__FitCint_513_0_88, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - error", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__FitCint_513_0_89, 85, G__get_linked_tagnum(&G__FitCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&TMultiDimFet::Class), 0);
   G__memfunc_setup("Class_Name",982,G__FitCint_513_0_90, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&TMultiDimFet::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__FitCint_513_0_91, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&TMultiDimFet::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__FitCint_513_0_92, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&TMultiDimFet::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__FitCint_513_0_93, 85, G__get_linked_tagnum(&G__FitCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__FitCint_513_0_94, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__FitCint_513_0_95, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FitCint_513_0_96, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FitCint_513_0_97, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&TMultiDimFet::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FitCint_513_0_98, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&TMultiDimFet::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__FitCint_513_0_99, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&TMultiDimFet::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FitCint_513_0_100, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&TMultiDimFet::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("TMultiDimFet", 1176, G__FitCint_513_0_101, (int) ('i'), G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet), -1, 0, 1, 1, 1, 0, "u 'TMultiDimFet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TMultiDimFet", 1302, G__FitCint_513_0_102, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLHCApertureApproximator(void) {
   /* LHCApertureApproximator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator));
   G__memfunc_setup("LHCApertureApproximator",2341,G__FitCint_585_0_1, 105, G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LHCApertureApproximator",2341,G__FitCint_585_0_2, 105, G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator), -1, 0, 6, 1, 1, 0, 
"u 'LHCOpticsApproximator' - 11 - in d - - 0 - rect_x "
"d - - 0 - rect_y d - - 0 - r_el_x "
"d - - 0 - r_el_y i 'LHCApertureApproximator::aperture_type' - 0 RECTELLIPSE type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckAperture",1318,G__FitCint_585_0_3, 103, -1, -1, 0, 1, 1, 1, 0, "D - - 0 - in", "x, thx. y, thy, ksi", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__FitCint_585_0_4, 85, G__get_linked_tagnum(&G__FitCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&LHCApertureApproximator::Class), 0);
   G__memfunc_setup("Class_Name",982,G__FitCint_585_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&LHCApertureApproximator::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__FitCint_585_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&LHCApertureApproximator::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__FitCint_585_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&LHCApertureApproximator::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__FitCint_585_0_8, 85, G__get_linked_tagnum(&G__FitCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__FitCint_585_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__FitCint_585_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FitCint_585_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FitCint_585_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&LHCApertureApproximator::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FitCint_585_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&LHCApertureApproximator::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__FitCint_585_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&LHCApertureApproximator::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FitCint_585_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&LHCApertureApproximator::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("LHCApertureApproximator", 2341, G__FitCint_585_0_16, (int) ('i'), 
G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator), -1, 0, 1, 1, 1, 0, "u 'LHCApertureApproximator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LHCApertureApproximator", 2467, G__FitCint_585_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FitCint_585_0_18, (int) ('u'), G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator), -1, 1, 1, 1, 1, 0, "u 'LHCApertureApproximator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLHCOpticsApproximator(void) {
   /* LHCOpticsApproximator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator));
   G__memfunc_setup("LHCOpticsApproximator",2127,G__FitCint_586_0_1, 105, G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LHCOpticsApproximator",2127,G__FitCint_586_0_2, 105, G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator), -1, 0, 5, 1, 1, 0, 
"u 'string' - 0 - name u 'string' - 0 - title "
"i 'TMultiDimFet::EMDFPolyType' - 0 - polynom_type u 'string' - 0 - beam_direction "
"d - - 0 - nominal_beam_energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LHCOpticsApproximator",2127,G__FitCint_586_0_3, 105, G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator), -1, 0, 1, 1, 1, 0, "u 'LHCOpticsApproximator' - 11 - org", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__FitCint_586_0_4, 117, G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator), -1, 1, 1, 1, 1, 0, "u 'LHCOpticsApproximator' - 11 - org", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Train",510,G__FitCint_586_0_5, 121, -1, -1, 0, 9, 1, 1, 0, 
"U 'TTree' - 0 - inp_tree u 'string' - 0 std::string(\"def\") data_prefix "
"i 'LHCOpticsApproximator::polynomials_selection' - 0 PREDEFINED mode i - - 0 10 max_degree_x "
"i - - 0 10 max_degree_tx i - - 0 10 max_degree_y "
"i - - 0 10 max_degree_ty g - - 0 false common_terms "
"D - - 0 NULL prec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Test",416,G__FitCint_586_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TTree' - 0 - inp_tree U 'TFile' - 0 - f_out "
"u 'string' - 0 std::string(\"def\") data_prefix u 'string' - 0 std::string(\"\") base_out_dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestAperture",1256,G__FitCint_586_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - in_tree U 'TTree' - 0 - out_tree", "x, theta_x, y, theta_y, ksi, mad_accepted, parametriz_accepted", (void*) NULL, 0);
   G__memfunc_setup("Transport",973,G__FitCint_586_0_8, 103, -1, -1, 0, 3, 1, 1, 0, 
"U 'MadKinematicDescriptor' - 10 - in U 'MadKinematicDescriptor' - 0 - out "
"g - - 0 false check_apertures", "return true if transport possible", (void*) NULL, 0);
   G__memfunc_setup("Transport",973,G__FitCint_586_0_9, 103, -1, -1, 0, 3, 1, 1, 0, 
"D - - 0 - in D - - 0 - out "
"g - - 0 false check_apertures", "return true if transport possible, double x, theta_x, y, theta_y, ksi", (void*) NULL, 0);
   G__memfunc_setup("Transport_m_GeV",1530,G__FitCint_586_0_10, 103, -1, -1, 0, 6, 1, 1, 0, 
"D - - 0 - in_pos D - - 0 - in_momentum "
"D - - 0 - out_pos D - - 0 - out_momentum "
"g - - 0 - check_apertures d - - 0 - z2_z1_dist", "pos, momentum: x,y,z;  pos in m, momentum in GeV/c", (void*) NULL, 0);
   G__memfunc_setup("PrintInputRange",1546,G__FitCint_586_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckInputRange",1499,G__FitCint_586_0_12, 103, -1, -1, 0, 1, 1, 1, 0, "D - - 0 - in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRectEllipseAperture",2221,G__FitCint_586_0_13, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'LHCOpticsApproximator' - 11 - in d - - 0 - rect_x "
"d - - 0 - rect_y d - - 0 - r_el_x "
"d - - 0 - r_el_y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintOpticalFunctions",2194,G__FitCint_586_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintCoordinateOpticalFunctions",3226,G__FitCint_586_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TMultiDimFet' - 1 - parametrization u 'string' - 11 - coord_name "
"u 'vector<string,allocator<string> >' 'vector<std::string>' 11 - input_vars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLineariasedTransportMatrixX",3099,G__FitCint_586_0_16, 121, -1, -1, 0, 8, 1, 1, 0, 
"d - - 0 - mad_init_x d - - 0 - mad_init_thx "
"d - - 0 - mad_init_y d - - 0 - mad_init_thy "
"d - - 0 - mad_init_xi u 'TMatrixT<double>' 'TMatrixD' 1 - tr_matrix "
"d - - 0 10e-6 d_mad_x d - - 0 10e-6 d_mad_thx", "[m], [rad], xi:-1...0", (void*) NULL, 0);
   G__memfunc_setup("GetLineariasedTransportMatrixY",3100,G__FitCint_586_0_17, 121, -1, -1, 0, 8, 1, 1, 0, 
"d - - 0 - mad_init_x d - - 0 - mad_init_thx "
"d - - 0 - mad_init_y d - - 0 - mad_init_thy "
"d - - 0 - mad_init_xi u 'TMatrixT<double>' 'TMatrixD' 1 - tr_matrix "
"d - - 0 10e-6 d_mad_y d - - 0 10e-6 d_mad_thy", "[m], [rad], xi:-1...0", (void*) NULL, 0);
   G__memfunc_setup("GetDx",476,G__FitCint_586_0_18, 100, -1, -1, 0, 6, 1, 1, 0, 
"d - - 0 - mad_init_x d - - 0 - mad_init_thx "
"d - - 0 - mad_init_y d - - 0 - mad_init_thy "
"d - - 0 - mad_init_xi d - - 0 0.001 d_mad_xi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDxds",691,G__FitCint_586_0_19, 100, -1, -1, 0, 6, 1, 1, 0, 
"d - - 0 - mad_init_x d - - 0 - mad_init_thx "
"d - - 0 - mad_init_y d - - 0 - mad_init_thy "
"d - - 0 - mad_init_xi d - - 0 0.001 d_mad_xi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetApertures",1243,G__FitCint_586_0_20, 117, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR), G__defined_typename("vector<LHCApertureApproximator>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitializeApproximators",2443,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 4, 0, 
"i 'LHCOpticsApproximator::polynomials_selection' - 0 - mode i - - 0 - max_degree_x "
"i - - 0 - max_degree_tx i - - 0 - max_degree_y "
"i - - 0 - max_degree_ty g - - 0 - common_terms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefaultAproximatorSettings",3032,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"u 'TMultiDimFet' - 1 - approximator i 'LHCOpticsApproximator::variable_type' - 0 - var_type "
"i - - 0 - max_degree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTermsManually",1658,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"u 'TMultiDimFet' - 1 - approximator i 'LHCOpticsApproximator::variable_type' - 0 - variable "
"i - - 0 - max_degree g - - 0 - common_terms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AllocateErrorHists",1850,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TH1D' - 2 - err_hists", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AllocateErrorInputCorHists",2670,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TH2D' - 0 - err_inp_cor_hists[][5]", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AllocateErrorOutputCorHists",2799,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TH2D' - 0 - err_out_cor_hists[][5]", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteErrorHists",1640,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TH1D' - 2 - err_hists", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteErrorCorHistograms",2466,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TH2D' - 0 - err_cor_hists[][5]", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillErrorHistograms",1970,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"D - - 0 - errors U 'TH1D' - 2 - err_hists", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillErrorDataCorHistograms",2640,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"D - - 0 - errors D - - 0 - var "
"U 'TH2D' - 0 - err_cor_hists[][5]", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteHistograms",1580,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"U 'TH1D' - 2 - err_hists U 'TH2D' - 0 - err_inp_cor_hists[][5] "
"U 'TH2D' - 0 - err_out_cor_hists[][5] U 'TFile' - 0 - f_out "
"u 'string' - 0 - base_out_dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__FitCint_586_0_33, 85, G__get_linked_tagnum(&G__FitCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&LHCOpticsApproximator::Class), 0);
   G__memfunc_setup("Class_Name",982,G__FitCint_586_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&LHCOpticsApproximator::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__FitCint_586_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&LHCOpticsApproximator::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__FitCint_586_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&LHCOpticsApproximator::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__FitCint_586_0_37, 85, G__get_linked_tagnum(&G__FitCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__FitCint_586_0_38, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__FitCint_586_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FitCint_586_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FitCint_586_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&LHCOpticsApproximator::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FitCint_586_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&LHCOpticsApproximator::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__FitCint_586_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&LHCOpticsApproximator::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FitCint_586_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&LHCOpticsApproximator::DeclFileLine), 0);
   // automatic destructor
   G__memfunc_setup("~LHCOpticsApproximator", 2253, G__FitCint_586_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR(void) {
   /* vector<LHCApertureApproximator,allocator<LHCApertureApproximator> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR));
   G__memfunc_setup("at",213,G__FitCint_594_0_1, 117, G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator), -1, 1, 1, 1, 1, 0, "k - 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__FitCint_594_0_2, 117, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__FitCint_594_0_3, 117, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__FitCint_594_0_4, 117, G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiteratorgR), G__defined_typename("vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__FitCint_594_0_5, 117, G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiteratorgR), G__defined_typename("vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__FitCint_594_0_6, 107, -1, G__defined_typename("vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__FitCint_594_0_7, 107, -1, G__defined_typename("vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__FitCint_594_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__FitCint_594_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type' 0 - sz u 'LHCApertureApproximator' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__FitCint_594_0_10, 107, -1, G__defined_typename("vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__FitCint_594_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__FitCint_594_0_12, 117, G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator), -1, 1, 1, 1, 1, 0, "k - 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >",6622,G__FitCint_594_0_13, 105, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >",6622,G__FitCint_594_0_14, 105, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type' 0 - n u 'LHCApertureApproximator' - 11 LHCApertureApproximator() value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >",6622,G__FitCint_594_0_15, 105, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >",6622,G__FitCint_594_0_16, 105, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator' 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::const_iterator' 10 - first u 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator' 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__FitCint_594_0_17, 117, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__FitCint_594_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__FitCint_594_0_19, 117, G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__FitCint_594_0_20, 117, G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__FitCint_594_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'LHCApertureApproximator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__FitCint_594_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__FitCint_594_0_23, 117, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator' - 0 - position u 'LHCApertureApproximator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__FitCint_594_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator' - 0 - position u 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator' 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::const_iterator' 10 - first "
"u 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator' 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__FitCint_594_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator' - 0 - position k - 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::size_type' 0 - n "
"u 'LHCApertureApproximator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__FitCint_594_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__FitCint_594_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__FitCint_594_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator' - 0 - first u 'vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__FitCint_594_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >", 6748, G__FitCint_594_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTNtupleDcorr(void) {
   /* TNtupleDcorr */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr));
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TNtupleDcorr",1222,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr), -1, 0, 1, 1, 4, 0, "u 'TNtupleDcorr' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr), -1, 1, 1, 1, 4, 0, "u 'TNtupleDcorr' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("TNtupleDcorr",1222,G__FitCint_603_0_4, 105, G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TNtupleDcorr",1222,G__FitCint_603_0_5, 105, G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr), -1, 0, 4, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - varlist i - 'Int_t' 0 32000 bufsize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Browse",626,G__FitCint_603_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,G__FitCint_603_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "D - 'Double_t' 10 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,G__FitCint_603_0_8, 105, -1, G__defined_typename("Int_t"), 0, 15, 1, 1, 0, 
"d - 'Double_t' 0 - x0 d - 'Double_t' 0 - x1 "
"d - 'Double_t' 0 0 x2 d - 'Double_t' 0 0 x3 "
"d - 'Double_t' 0 0 x4 d - 'Double_t' 0 0 x5 "
"d - 'Double_t' 0 0 x6 d - 'Double_t' 0 0 x7 "
"d - 'Double_t' 0 0 x8 d - 'Double_t' 0 0 x9 "
"d - 'Double_t' 0 0 x10 d - 'Double_t' 0 0 x11 "
"d - 'Double_t' 0 0 x12 d - 'Double_t' 0 0 x13 "
"d - 'Double_t' 0 0 x14", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNvar",695,G__FitCint_603_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetArgs",685,G__FitCint_603_0_10, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetBranchAddress",1815,G__FitCint_603_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TBranch' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetBranchAddresses",2031,G__FitCint_603_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FitCint_603_0_13, 85, G__get_linked_tagnum(&G__FitCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&TNtupleDcorr::Class), 0);
   G__memfunc_setup("Class_Name",982,G__FitCint_603_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&TNtupleDcorr::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__FitCint_603_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&TNtupleDcorr::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__FitCint_603_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&TNtupleDcorr::Dictionary), 0);
   G__memfunc_setup("IsA",253,G__FitCint_603_0_17, 85, G__get_linked_tagnum(&G__FitCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__FitCint_603_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__FitCint_603_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FitCint_603_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FitCint_603_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&TNtupleDcorr::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FitCint_603_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&TNtupleDcorr::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__FitCint_603_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&TNtupleDcorr::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FitCint_603_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&TNtupleDcorr::DeclFileLine), 0);
   // automatic destructor
   G__memfunc_setup("~TNtupleDcorr", 1348, G__FitCint_603_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR(void) {
   /* vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR));
   G__memfunc_setup("at",213,G__FitCint_605_0_1, 117, G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator), -1, 1, 1, 1, 1, 0, "k - 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__FitCint_605_0_2, 117, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__FitCint_605_0_3, 117, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__FitCint_605_0_4, 117, G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiteratorgR), G__defined_typename("vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__FitCint_605_0_5, 117, G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiteratorgR), G__defined_typename("vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__FitCint_605_0_6, 107, -1, G__defined_typename("vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__FitCint_605_0_7, 107, -1, G__defined_typename("vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__FitCint_605_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__FitCint_605_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type' 0 - sz u 'LHCOpticsApproximator' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__FitCint_605_0_10, 107, -1, G__defined_typename("vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__FitCint_605_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__FitCint_605_0_12, 117, G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator), -1, 1, 1, 1, 1, 0, "k - 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >",6194,G__FitCint_605_0_13, 105, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >",6194,G__FitCint_605_0_14, 105, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type' 0 - n u 'LHCOpticsApproximator' - 11 LHCOpticsApproximator() value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >",6194,G__FitCint_605_0_15, 105, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >",6194,G__FitCint_605_0_16, 105, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator' 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::const_iterator' 10 - first u 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator' 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__FitCint_605_0_17, 117, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__FitCint_605_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__FitCint_605_0_19, 117, G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__FitCint_605_0_20, 117, G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__FitCint_605_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'LHCOpticsApproximator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__FitCint_605_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__FitCint_605_0_23, 117, G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator' - 0 - position u 'LHCOpticsApproximator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__FitCint_605_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator' - 0 - position u 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator' 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::const_iterator' 10 - first "
"u 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator' 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__FitCint_605_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator' - 0 - position k - 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::size_type' 0 - n "
"u 'LHCOpticsApproximator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__FitCint_605_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__FitCint_605_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__FitCint_605_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator' - 0 - first u 'vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__FitCint_605_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >", 6320, G__FitCint_605_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncFitCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalFitCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcFitCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__FitCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__FitCintLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TBrowser = { "TBrowser" , 99 , -1 };
G__linked_taginfo G__FitCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__FitCintLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR = { "vector<TStreamerInfo*,allocator<TStreamerInfo*> >" , 99 , -1 };
G__linked_taginfo G__FitCintLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TStreamerInfo*,allocator<TStreamerInfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__FitCintLN_multimaplEvoidmUcOshortcOlesslEvoidmUgRcOallocatorlEpairlEvoidmUsPconstcOshortgRsPgRsPgR = { "multimap<void*,short,less<void*>,allocator<pair<void* const,short> > >" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTSparselEdoublegR = { "TMatrixTSparse<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TVirtualFitter = { "TVirtualFitter" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMultiDimFet = { "TMultiDimFet" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TMultiDimFetcLcLEMDFPolyType = { "TMultiDimFet::EMDFPolyType" , 101 , -1 };
G__linked_taginfo G__FitCintLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TAttMarker = { "TAttMarker" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TBranch = { "TBranch" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__FitCintLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__FitCintLN_MadKinematicDescriptor = { "MadKinematicDescriptor" , 115 , -1 };
G__linked_taginfo G__FitCintLN_LHCApertureApproximator = { "LHCApertureApproximator" , 99 , -1 };
G__linked_taginfo G__FitCintLN_LHCOpticsApproximator = { "LHCOpticsApproximator" , 99 , -1 };
G__linked_taginfo G__FitCintLN_LHCOpticsApproximatorcLcLpolynomials_selection = { "LHCOpticsApproximator::polynomials_selection" , 101 , -1 };
G__linked_taginfo G__FitCintLN_LHCOpticsApproximatorcLcLbeam_type = { "LHCOpticsApproximator::beam_type" , 101 , -1 };
G__linked_taginfo G__FitCintLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__FitCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR = { "vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >" , 99 , -1 };
G__linked_taginfo G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiterator = { "vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator" , 99 , -1 };
G__linked_taginfo G__FitCintLN_reverse_iteratorlEvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_vectorlETMultiDimFetmUcOallocatorlETMultiDimFetmUgRsPgR = { "vector<TMultiDimFet*,allocator<TMultiDimFet*> >" , 99 , -1 };
G__linked_taginfo G__FitCintLN_reverse_iteratorlEvectorlETMultiDimFetmUcOallocatorlETMultiDimFetmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TMultiDimFet*,allocator<TMultiDimFet*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FitCintLN_LHCOpticsApproximatorcLcLvariable_type = { "LHCOpticsApproximator::variable_type" , 101 , -1 };
G__linked_taginfo G__FitCintLN_LHCApertureApproximatorcLcLaperture_type = { "LHCApertureApproximator::aperture_type" , 101 , -1 };
G__linked_taginfo G__FitCintLN_TNtupleDcorr = { "TNtupleDcorr" , 99 , -1 };
G__linked_taginfo G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR = { "vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >" , 99 , -1 };
G__linked_taginfo G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiterator = { "vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator" , 99 , -1 };
G__linked_taginfo G__FitCintLN_reverse_iteratorlEvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableFitCint() {
  G__FitCintLN_TClass.tagnum = -1 ;
  G__FitCintLN_TBuffer.tagnum = -1 ;
  G__FitCintLN_TMemberInspector.tagnum = -1 ;
  G__FitCintLN_TObject.tagnum = -1 ;
  G__FitCintLN_TNamed.tagnum = -1 ;
  G__FitCintLN_string.tagnum = -1 ;
  G__FitCintLN_TList.tagnum = -1 ;
  G__FitCintLN_TBrowser.tagnum = -1 ;
  G__FitCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__FitCintLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR.tagnum = -1 ;
  G__FitCintLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FitCintLN_TFile.tagnum = -1 ;
  G__FitCintLN_multimaplEvoidmUcOshortcOlesslEvoidmUgRcOallocatorlEpairlEvoidmUsPconstcOshortgRsPgRsPgR.tagnum = -1 ;
  G__FitCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__FitCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__FitCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__FitCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTSparselEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__FitCintLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__FitCintLN_TVirtualFitter.tagnum = -1 ;
  G__FitCintLN_TMultiDimFet.tagnum = -1 ;
  G__FitCintLN_TMultiDimFetcLcLEMDFPolyType.tagnum = -1 ;
  G__FitCintLN_TAttLine.tagnum = -1 ;
  G__FitCintLN_TAttFill.tagnum = -1 ;
  G__FitCintLN_TAttMarker.tagnum = -1 ;
  G__FitCintLN_TTree.tagnum = -1 ;
  G__FitCintLN_TBranch.tagnum = -1 ;
  G__FitCintLN_TH1D.tagnum = -1 ;
  G__FitCintLN_TH2D.tagnum = -1 ;
  G__FitCintLN_MadKinematicDescriptor.tagnum = -1 ;
  G__FitCintLN_LHCApertureApproximator.tagnum = -1 ;
  G__FitCintLN_LHCOpticsApproximator.tagnum = -1 ;
  G__FitCintLN_LHCOpticsApproximatorcLcLpolynomials_selection.tagnum = -1 ;
  G__FitCintLN_LHCOpticsApproximatorcLcLbeam_type.tagnum = -1 ;
  G__FitCintLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__FitCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR.tagnum = -1 ;
  G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiterator.tagnum = -1 ;
  G__FitCintLN_reverse_iteratorlEvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FitCintLN_vectorlETMultiDimFetmUcOallocatorlETMultiDimFetmUgRsPgR.tagnum = -1 ;
  G__FitCintLN_reverse_iteratorlEvectorlETMultiDimFetmUcOallocatorlETMultiDimFetmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FitCintLN_LHCOpticsApproximatorcLcLvariable_type.tagnum = -1 ;
  G__FitCintLN_LHCApertureApproximatorcLcLaperture_type.tagnum = -1 ;
  G__FitCintLN_TNtupleDcorr.tagnum = -1 ;
  G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR.tagnum = -1 ;
  G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiterator.tagnum = -1 ;
  G__FitCintLN_reverse_iteratorlEvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableFitCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum(&G__FitCintLN_TClass);
   G__get_linked_tagnum(&G__FitCintLN_TBuffer);
   G__get_linked_tagnum(&G__FitCintLN_TMemberInspector);
   G__get_linked_tagnum(&G__FitCintLN_TObject);
   G__get_linked_tagnum(&G__FitCintLN_TNamed);
   G__get_linked_tagnum(&G__FitCintLN_string);
   G__get_linked_tagnum(&G__FitCintLN_TList);
   G__get_linked_tagnum(&G__FitCintLN_TBrowser);
   G__get_linked_tagnum(&G__FitCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum(&G__FitCintLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR);
   G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__FitCintLN_TFile);
   G__get_linked_tagnum(&G__FitCintLN_multimaplEvoidmUcOshortcOlesslEvoidmUgRcOallocatorlEpairlEvoidmUsPconstcOshortgRsPgRsPgR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum(&G__FitCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTSparselEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum(&G__FitCintLN_TVirtualFitter);
   G__tagtable_setup(G__get_linked_tagnum(&G__FitCintLN_TMultiDimFet),sizeof(TMultiDimFet),-1,326912,"Multi dimensional fit class",G__setup_memvarTMultiDimFet,G__setup_memfuncTMultiDimFet);
   G__get_linked_tagnum(&G__FitCintLN_TMultiDimFetcLcLEMDFPolyType);
   G__get_linked_tagnum(&G__FitCintLN_TAttLine);
   G__get_linked_tagnum(&G__FitCintLN_TAttFill);
   G__get_linked_tagnum(&G__FitCintLN_TAttMarker);
   G__get_linked_tagnum(&G__FitCintLN_TTree);
   G__get_linked_tagnum(&G__FitCintLN_TBranch);
   G__get_linked_tagnum(&G__FitCintLN_TH1D);
   G__get_linked_tagnum(&G__FitCintLN_TH2D);
   G__get_linked_tagnum(&G__FitCintLN_MadKinematicDescriptor);
   G__tagtable_setup(G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximator),sizeof(LHCApertureApproximator),-1,323840,"Aperture approximator",G__setup_memvarLHCApertureApproximator,G__setup_memfuncLHCApertureApproximator);
   G__tagtable_setup(G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximator),sizeof(LHCOpticsApproximator),-1,326400,"Proton transport approximator",G__setup_memvarLHCOpticsApproximator,G__setup_memfuncLHCOpticsApproximator);
   G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximatorcLcLpolynomials_selection);
   G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximatorcLcLbeam_type);
   G__get_linked_tagnum(&G__FitCintLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR),sizeof(vector<LHCApertureApproximator,allocator<LHCApertureApproximator> >),-1,298752,(char*)NULL,G__setup_memvarvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR,G__setup_memfuncvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgR);
   G__get_linked_tagnum(&G__FitCintLN_vectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiterator);
   G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlELHCApertureApproximatorcOallocatorlELHCApertureApproximatorgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__FitCintLN_vectorlETMultiDimFetmUcOallocatorlETMultiDimFetmUgRsPgR);
   G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlETMultiDimFetmUcOallocatorlETMultiDimFetmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__FitCintLN_LHCOpticsApproximatorcLcLvariable_type);
   G__get_linked_tagnum(&G__FitCintLN_LHCApertureApproximatorcLcLaperture_type);
   G__tagtable_setup(G__get_linked_tagnum(&G__FitCintLN_TNtupleDcorr),sizeof(TNtupleDcorr),-1,327424,"A simple tree with branches of floats.",G__setup_memvarTNtupleDcorr,G__setup_memfuncTNtupleDcorr);
   G__tagtable_setup(G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR),sizeof(vector<LHCOpticsApproximator,allocator<LHCOpticsApproximator> >),-1,298752,(char*)NULL,G__setup_memvarvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR,G__setup_memfuncvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgR);
   G__get_linked_tagnum(&G__FitCintLN_vectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiterator);
   G__get_linked_tagnum(&G__FitCintLN_reverse_iteratorlEvectorlELHCOpticsApproximatorcOallocatorlELHCOpticsApproximatorgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupFitCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupFitCint()");
  G__set_cpp_environmentFitCint();
  G__cpp_setup_tagtableFitCint();

  G__cpp_setup_inheritanceFitCint();

  G__cpp_setup_typetableFitCint();

  G__cpp_setup_memvarFitCint();

  G__cpp_setup_memfuncFitCint();
  G__cpp_setup_globalFitCint();
  G__cpp_setup_funcFitCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncFitCint();
  return;
}
class G__cpp_setup_initFitCint {
  public:
    G__cpp_setup_initFitCint() { G__add_setup_func("FitCint",(G__incsetup)(&G__cpp_setupFitCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initFitCint() { G__remove_setup_func("FitCint"); }
};
G__cpp_setup_initFitCint G__cpp_setup_initializerFitCint;

